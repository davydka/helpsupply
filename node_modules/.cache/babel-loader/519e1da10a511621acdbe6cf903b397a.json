{"ast":null,"code":"var _jsxFileName = \"/Users/johnson/Dropbox/Coronavirus/hospitalcommunity/app/src/components/Login.js\";\nimport React from \"react\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.props.fbui.start(\"#firebaseui-auth-container\", {\n      callbacks: {\n        signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n          // User successfully signed in.\n          // Return type determines whether we continue the redirect automatically\n          // or whether we leave that to developer to handle.\n          return true;\n        },\n        uiShown: function () {\n          // The widget is rendered.\n          // Hide the loader.\n          document.getElementById(\"loader\").style.display = \"none\";\n        }\n      },\n      // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n      signInFlow: \"popup\",\n      signInSuccessUrl: \"/\",\n      signInOptions: [// Leave the lines as is for the providers you want to offer your users.\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID]\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"firebaseui-auth-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/johnson/Dropbox/Coronavirus/hospitalcommunity/app/src/components/Login.js"],"names":["React","Login","Component","constructor","props","state","componentDidMount","fbui","start","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","uiShown","document","getElementById","style","display","signInFlow","signInSuccessUrl","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,KAAL,CAAWG,IAAX,CAAgBC,KAAhB,CAAsB,4BAAtB,EAAoD;AAClDC,MAAAA,SAAS,EAAE;AACTC,QAAAA,2BAA2B,EAAE,UAASC,UAAT,EAAqBC,WAArB,EAAkC;AAC7D;AACA;AACA;AACA,iBAAO,IAAP;AACD,SANQ;AAOTC,QAAAA,OAAO,EAAE,YAAW;AAClB;AACA;AACAC,UAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCC,OAAxC,GAAkD,MAAlD;AACD;AAXQ,OADuC;AAclD;AACAC,MAAAA,UAAU,EAAE,OAfsC;AAgBlDC,MAAAA,gBAAgB,EAAE,GAhBgC;AAiBlDC,MAAAA,aAAa,EAAE,CACb;AACAC,MAAAA,QAAQ,CAACC,IAAT,CAAcC,kBAAd,CAAiCC,WAFpB,EAGbH,QAAQ,CAACC,IAAT,CAAcG,oBAAd,CAAmCD,WAHtB,EAIbH,QAAQ,CAACC,IAAT,CAAcI,iBAAd,CAAgCF,WAJnB;AAjBmC,KAApD;AAwBD;;AAEDG,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,2BAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF;AAMD;;AAxCiC;;AA2CpC,eAAe1B,KAAf","sourcesContent":["import React from \"react\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.props.fbui.start(\"#firebaseui-auth-container\", {\n      callbacks: {\n        signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n          // User successfully signed in.\n          // Return type determines whether we continue the redirect automatically\n          // or whether we leave that to developer to handle.\n          return true;\n        },\n        uiShown: function() {\n          // The widget is rendered.\n          // Hide the loader.\n          document.getElementById(\"loader\").style.display = \"none\";\n        }\n      },\n      // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n      signInFlow: \"popup\",\n      signInSuccessUrl: \"/\",\n      signInOptions: [\n        // Leave the lines as is for the providers you want to offer your users.\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n      ]\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"firebaseui-auth-container\"></div>\n        <div id=\"loader\">Loading...</div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}