{"ast":null,"code":"var _jsxFileName = \"/Users/johnson/Dropbox/Coronavirus/hospitalcommunity/app/src/components/Hospital.js\";\nimport React from \"react\";\nimport * as hospital_index from \"../data/hospital_index\";\nimport * as needTypes from \"../data/needTypes\";\nimport { withRouter } from \"react-router-dom\";\nimport LinksResult from \"./LinksResult\";\n\nclass Hospital extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getUserData = () => {\n      let db = this.props.db;\n      db.collection(\"need\").where(\"location_id\", \"==\", this.props.match.params.id).get().then(snapshot => {\n        let data = snapshot.docs.map(d => {\n          var dict = d.data();\n          dict[\"id\"] = d.id;\n          return dict;\n        });\n        this.setState({\n          needs: data\n        });\n      }).catch(console.log);\n\n      if (this.props.userData.role === \"mod\") {\n        db.collection(\"documents\").where(\"location_id\", \"==\", this.props.match.params.id).get().then(snapshot => {\n          let data = snapshot.docs.map(d => {\n            var dict = d.data();\n            dict[\"id\"] = d.id;\n            return dict;\n          });\n          this.setState({\n            links: data\n          });\n        }).catch(console.log);\n      } else {\n        db.collection(\"documents\").where(\"location_id\", \"==\", this.props.match.params.id).where(\"published\", \"==\", true).get().then(snapshot => {\n          let data = snapshot.docs.map(d => {\n            var dict = d.data();\n            dict[\"id\"] = d.id;\n            return dict;\n          });\n          this.setState({\n            links: data\n          });\n        }).catch(console.log);\n      }\n    };\n\n    this.writeUserData = (collection, data, title) => {\n      let my = this;\n      let db = this.props.db;\n\n      if (title) {\n        db.collection(collection).doc(title).set(data).then(function () {\n          console.log(\"Document successfully written!\");\n          my.getUserData();\n          my.setState({\n            linkSubmitTextValue: \"\",\n            linkSubmitValue: \"\",\n            confirmation: true,\n            lastLinkSubmitted: data.text,\n            error: \"\"\n          });\n        }).catch(function (error) {\n          console.error(\"Error writing document: \", error);\n        });\n      } else {\n        db.collection(collection).add(data).then(function () {\n          console.log(\"Document successfully written!\");\n          my.getUserData();\n          my.setState({\n            linkSubmitTextValue: \"\",\n            linkSubmitValue: \"\",\n            confirmation: true,\n            lastLinkSubmitted: data.text,\n            error: \"\"\n          });\n        }).catch(function (error) {\n          console.error(\"Error writing document: \", error);\n        });\n      }\n    };\n\n    this.approvePost = (collection, id) => {\n      let my = this;\n      let db = this.props.db;\n      db.collection(collection).doc(id).set({\n        published: true\n      }, {\n        merge: true\n      }).then(function () {\n        console.log(\"Post approved!\");\n        my.getUserData();\n      }).catch(function (error) {\n        console.error(\"Error writing document: \", error);\n      });\n    };\n\n    this.deletePost = (collection, id) => {\n      let my = this;\n      let db = this.props.db;\n      db.collection(collection).doc(id).delete().then(function () {\n        console.log(\"Post deleted!\");\n        my.getUserData();\n      }).catch(function (error) {\n        console.error(\"Error writing document: \", error);\n      });\n    };\n\n    this.state = {\n      linkSubmitTextValue: \"\",\n      linkSubmitValue: \"\",\n      needs: [],\n      links: [],\n      confirmation: false,\n      lastLinkSubmitted: \"\"\n    };\n    this.handleLinkSubmitChange = this.handleLinkSubmitChange.bind(this);\n    this.handleLinkSubmitTextChange = this.handleLinkSubmitTextChange.bind(this);\n    this.handleLinkSubmit = this.handleLinkSubmit.bind(this);\n    this.getUserData = this.getUserData.bind(this);\n    this.approvePost = this.approvePost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n  }\n\n  handleLinkSubmitChange(event) {\n    this.setState({\n      linkSubmitValue: event.target.value\n    });\n  }\n\n  handleLinkSubmitTextChange(event) {\n    this.setState({\n      linkSubmitTextValue: event.target.value\n    });\n  }\n\n  handleLinkSubmit(event) {\n    event.preventDefault();\n\n    if (this.state.linkSubmitValue !== \"\" && this.state.linkSubmitTextValue !== \"\") {\n      console.log(\"Submitting...\" + this.state.linkSubmitValue);\n      this.writeUserData(\"documents\", {\n        kind: \"link\",\n        location_id: \"330101\",\n        text: this.state.linkSubmitTextValue,\n        url: this.state.linkSubmitValue,\n        published: false\n      });\n    } else {\n      this.setState({\n        error: \"You're missing a required field.\"\n      });\n    }\n  }\n\n  handleChange(event) {}\n\n  handleSubmit(event) {}\n\n  componentDidUpdate() {}\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  componentDidUpdate(prevProps) {\n    //update data if user role has switched\n    if (prevProps.userData.role != this.props.userData.role) {\n      this.getUserData();\n    }\n  }\n\n  render() {\n    const hospital = hospital_index.index.id_index[this.props.match.params.id];\n    return React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"navbar navbar-light bg-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"navbar-brand mb-0 h1\",\n      id: \"hospitalname\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, hospital.name), \" in \", hospital.city), React.createElement(\"a\", {\n      href: \"#\",\n      className: \"navbar-brand mb-0 h1 logored\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"hospital.community\")), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panelFull\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, needTypes.documentTypes.map((documentType, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, documentType.name), React.createElement(\"ul\", {\n        className: \"list-group linksList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, this.state.links.map(link => {\n        if (link.kind === documentType.id) {\n          return React.createElement(LinksResult, {\n            key: link.id,\n            id: link.id,\n            url: link.url,\n            text: link.text,\n            published: link.published,\n            mod: this.props.userData.role === \"mod\",\n            approvePost: this.approvePost,\n            deletePost: this.deletePost,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221\n            },\n            __self: this\n          });\n        } else {\n          return \"\";\n        }\n      })), React.createElement(\"div\", {\n        className: \"linkSubmissionContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        class: \"linkSubmitGroup\",\n        onSubmit: this.handleLinkSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"submitLink\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"Have something to add?\"), React.createElement(\"input\", {\n        className: \"linkTitle form-control\",\n        id: \"linkTitle\",\n        placeholder: \"i.e. Google Spreadsheet for Equipment\",\n        value: this.state.linkSubmitTextValue,\n        onChange: this.handleLinkSubmitTextChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"linkSubmit form-control\",\n        id: \"linkSubmit\",\n        placeholder: \"https://...\",\n        value: this.state.linkSubmitValue,\n        onChange: this.handleLinkSubmitChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary linkSubmitBtn\",\n        onClick: this.handleLinkSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Submit\")), this.state.confirmation ? React.createElement(\"div\", {\n        id: \"confirmationText\",\n        class: \"confirmationText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, this.state.lastLinkSubmitted, \" submitted for review (we'll be quick)!\") : \"\", this.state.error ? React.createElement(\"div\", {\n        class: \"errorText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, this.state.error) : \"\"));\n    }))), React.createElement(\"div\", {\n      className: \"panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"Needs\"), React.createElement(\"span\", {\n      className: \"group\",\n      id: \"needslist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, needTypes.needTypes.map((needType, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"group-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, needType.name), React.createElement(\"ul\", {\n        className: \"list-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, this.state.needs.map(need => {\n        if (need.kind === needType.id) {\n          return React.createElement(\"li\", {\n            className: \"list-group-item needoffer\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 294\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 295\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 296\n            },\n            __self: this\n          }, need.subject)), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 298\n            },\n            __self: this\n          }, need.comments));\n        } else {\n          return \"\";\n        }\n      })));\n    }))), React.createElement(\"div\", {\n      className: \"panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Offers for Help\"), React.createElement(\"span\", {\n      className: \"group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, needTypes.offerTypes.map((offerType, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"group-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, offerType.name), React.createElement(\"ul\", {\n        className: \"list-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"addbutton btn btn-secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"Add\"));\n    })))));\n  }\n\n}\n\nexport default withRouter(Hospital);","map":{"version":3,"sources":["/Users/johnson/Dropbox/Coronavirus/hospitalcommunity/app/src/components/Hospital.js"],"names":["React","hospital_index","needTypes","withRouter","LinksResult","Hospital","Component","constructor","props","getUserData","db","collection","where","match","params","id","get","then","snapshot","data","docs","map","d","dict","setState","needs","catch","console","log","userData","role","links","writeUserData","title","my","doc","set","linkSubmitTextValue","linkSubmitValue","confirmation","lastLinkSubmitted","text","error","add","approvePost","published","merge","deletePost","delete","state","handleLinkSubmitChange","bind","handleLinkSubmitTextChange","handleLinkSubmit","event","target","value","preventDefault","kind","location_id","url","handleChange","handleSubmit","componentDidUpdate","componentDidMount","prevProps","render","hospital","index","id_index","name","city","documentTypes","documentType","i","link","needType","need","subject","comments","offerTypes","offerType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as hospital_index from \"../data/hospital_index\";\nimport * as needTypes from \"../data/needTypes\";\nimport { withRouter } from \"react-router-dom\";\nimport LinksResult from \"./LinksResult\";\n\nclass Hospital extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      linkSubmitTextValue: \"\",\n      linkSubmitValue: \"\",\n      needs: [],\n      links: [],\n      confirmation: false,\n      lastLinkSubmitted: \"\"\n    };\n    this.handleLinkSubmitChange = this.handleLinkSubmitChange.bind(this);\n    this.handleLinkSubmitTextChange = this.handleLinkSubmitTextChange.bind(\n      this\n    );\n\n    this.handleLinkSubmit = this.handleLinkSubmit.bind(this);\n    this.getUserData = this.getUserData.bind(this);\n    this.approvePost = this.approvePost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n  }\n\n  handleLinkSubmitChange(event) {\n    this.setState({ linkSubmitValue: event.target.value });\n  }\n\n  handleLinkSubmitTextChange(event) {\n    this.setState({ linkSubmitTextValue: event.target.value });\n  }\n\n  handleLinkSubmit(event) {\n    event.preventDefault();\n    if (\n      this.state.linkSubmitValue !== \"\" &&\n      this.state.linkSubmitTextValue !== \"\"\n    ) {\n      console.log(\"Submitting...\" + this.state.linkSubmitValue);\n      this.writeUserData(\"documents\", {\n        kind: \"link\",\n        location_id: \"330101\",\n        text: this.state.linkSubmitTextValue,\n        url: this.state.linkSubmitValue,\n        published: false\n      });\n    } else {\n      this.setState({\n        error: \"You're missing a required field.\"\n      });\n    }\n  }\n\n  getUserData = () => {\n    let db = this.props.db;\n\n    db.collection(\"need\")\n      .where(\"location_id\", \"==\", this.props.match.params.id)\n      .get()\n      .then(snapshot => {\n        let data = snapshot.docs.map(d => {\n          var dict = d.data();\n          dict[\"id\"] = d.id;\n          return dict;\n        });\n        this.setState({ needs: data });\n      })\n      .catch(console.log);\n    if (this.props.userData.role === \"mod\") {\n      db.collection(\"documents\")\n        .where(\"location_id\", \"==\", this.props.match.params.id)\n        .get()\n        .then(snapshot => {\n          let data = snapshot.docs.map(d => {\n            var dict = d.data();\n            dict[\"id\"] = d.id;\n            return dict;\n          });\n          this.setState({ links: data });\n        })\n        .catch(console.log);\n    } else {\n      db.collection(\"documents\")\n        .where(\"location_id\", \"==\", this.props.match.params.id)\n        .where(\"published\", \"==\", true)\n        .get()\n        .then(snapshot => {\n          let data = snapshot.docs.map(d => {\n            var dict = d.data();\n            dict[\"id\"] = d.id;\n            return dict;\n          });\n          this.setState({ links: data });\n        })\n        .catch(console.log);\n    }\n  };\n\n  writeUserData = (collection, data, title) => {\n    let my = this;\n    let db = this.props.db;\n\n    if (title) {\n      db.collection(collection)\n        .doc(title)\n        .set(data)\n        .then(function() {\n          console.log(\"Document successfully written!\");\n          my.getUserData();\n          my.setState({\n            linkSubmitTextValue: \"\",\n            linkSubmitValue: \"\",\n            confirmation: true,\n            lastLinkSubmitted: data.text,\n            error: \"\"\n          });\n        })\n        .catch(function(error) {\n          console.error(\"Error writing document: \", error);\n        });\n    } else {\n      db.collection(collection)\n        .add(data)\n        .then(function() {\n          console.log(\"Document successfully written!\");\n          my.getUserData();\n          my.setState({\n            linkSubmitTextValue: \"\",\n            linkSubmitValue: \"\",\n            confirmation: true,\n            lastLinkSubmitted: data.text,\n            error: \"\"\n          });\n        })\n        .catch(function(error) {\n          console.error(\"Error writing document: \", error);\n        });\n    }\n  };\n\n  approvePost = (collection, id) => {\n    let my = this;\n    let db = this.props.db;\n    db.collection(collection)\n      .doc(id)\n      .set(\n        {\n          published: true\n        },\n        { merge: true }\n      )\n      .then(function() {\n        console.log(\"Post approved!\");\n        my.getUserData();\n      })\n      .catch(function(error) {\n        console.error(\"Error writing document: \", error);\n      });\n  };\n\n  deletePost = (collection, id) => {\n    let my = this;\n    let db = this.props.db;\n    db.collection(collection)\n      .doc(id)\n      .delete()\n      .then(function() {\n        console.log(\"Post deleted!\");\n        my.getUserData();\n      })\n      .catch(function(error) {\n        console.error(\"Error writing document: \", error);\n      });\n  };\n\n  handleChange(event) {}\n\n  handleSubmit(event) {}\n\n  componentDidUpdate() {}\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  componentDidUpdate(prevProps) {\n    //update data if user role has switched\n    if (prevProps.userData.role != this.props.userData.role) {\n      this.getUserData();\n    }\n  }\n\n  render() {\n    const hospital = hospital_index.index.id_index[this.props.match.params.id];\n\n    return (\n      <div className=\"\">\n        <nav className=\"navbar navbar-light bg-light\">\n          <span className=\"navbar-brand mb-0 h1\" id=\"hospitalname\">\n            <b>{hospital.name}</b> in {hospital.city}\n          </span>\n          <a href=\"#\" className=\"navbar-brand mb-0 h1 logored\">\n            hospital.community\n          </a>\n        </nav>\n        <div className=\"content\">\n          <div className=\"panelFull\">\n            <span className=\"group\">\n              {needTypes.documentTypes.map((documentType, i) => {\n                return (\n                  <div key={i}>\n                    <h3>{documentType.name}</h3>\n                    <ul className=\"list-group linksList\">\n                      {this.state.links.map(link => {\n                        if (link.kind === documentType.id) {\n                          return (\n                            <LinksResult\n                              key={link.id}\n                              id={link.id}\n                              url={link.url}\n                              text={link.text}\n                              published={link.published}\n                              mod={this.props.userData.role === \"mod\"}\n                              approvePost={this.approvePost}\n                              deletePost={this.deletePost}\n                            />\n                          );\n                        } else {\n                          return \"\";\n                        }\n                      })}\n                    </ul>\n                    <div className=\"linkSubmissionContainer\">\n                      <form\n                        class=\"linkSubmitGroup\"\n                        onSubmit={this.handleLinkSubmit}\n                      >\n                        <div class=\"submitLink\">Have something to add?</div>\n                        <input\n                          className=\"linkTitle form-control\"\n                          id=\"linkTitle\"\n                          placeholder=\"i.e. Google Spreadsheet for Equipment\"\n                          value={this.state.linkSubmitTextValue}\n                          onChange={this.handleLinkSubmitTextChange}\n                        />\n                        <input\n                          className=\"linkSubmit form-control\"\n                          id=\"linkSubmit\"\n                          placeholder=\"https://...\"\n                          value={this.state.linkSubmitValue}\n                          onChange={this.handleLinkSubmitChange}\n                        />\n                        <button\n                          className=\"btn btn-primary linkSubmitBtn\"\n                          onClick={this.handleLinkSubmit}\n                        >\n                          Submit\n                        </button>\n                      </form>\n                      {this.state.confirmation ? (\n                        <div id=\"confirmationText\" class=\"confirmationText\">\n                          {this.state.lastLinkSubmitted} submitted for review\n                          (we'll be quick)!\n                        </div>\n                      ) : (\n                        \"\"\n                      )}\n                      {this.state.error ? (\n                        <div class=\"errorText\">{this.state.error}</div>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </span>\n          </div>\n          <div className=\"panel\">\n            <h3>Needs</h3>\n            <span className=\"group\" id=\"needslist\">\n              {needTypes.needTypes.map((needType, i) => {\n                return (\n                  <div key={i}>\n                    <h3 className=\"group-label\">{needType.name}</h3>\n                    <ul className=\"list-group\">\n                      {this.state.needs.map(need => {\n                        if (need.kind === needType.id) {\n                          return (\n                            <li className=\"list-group-item needoffer\">\n                              <div>\n                                <b>{need.subject}</b>\n                              </div>\n                              <div>{need.comments}</div>\n                            </li>\n                          );\n                        } else {\n                          return \"\";\n                        }\n                      })}\n                    </ul>\n                    {/*<button className=\"addbutton btn btn-secondary\" onClick=\"\">\n                      Add\n                    </button>*/}\n                  </div>\n                );\n              })}\n            </span>\n          </div>\n          <div className=\"panel\">\n            <h3>Offers for Help</h3>\n            <span className=\"group\">\n              {needTypes.offerTypes.map((offerType, i) => {\n                return (\n                  <div key={i}>\n                    <h3 className=\"group-label\">{offerType.name}</h3>\n                    <ul className=\"list-group\"></ul>\n                    <button className=\"addbutton btn btn-secondary\">Add</button>\n                  </div>\n                );\n              })}\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Hospital);\n"]},"metadata":{},"sourceType":"module"}